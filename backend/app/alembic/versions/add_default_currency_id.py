"""Add default_currency_id to user table

Revision ID: add_default_currency_id
Revises: 1a31ce608336
Create Date: 2024-03-19 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_default_currency_id'
down_revision = '1a31ce608336'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First create the currency table
    op.create_table(
        'currency',
        sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(5), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(50), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code')
    )
    op.create_index(op.f('ix_currency_code'), 'currency', ['code'], unique=True)
    op.create_index(op.f('ix_currency_id'), 'currency', ['id'], unique=False)
    op.create_index(op.f('ix_currency_name'), 'currency', ['name'], unique=False)

    # Add default_currency_id to user table
    op.add_column('user', sa.Column('default_currency_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.create_foreign_key(None, 'user', 'currency', ['default_currency_id'], ['id'])

    # Create payment_method table
    op.create_table(
        'payment_method',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(150), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(255), nullable=True),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_method_id'), 'payment_method', ['id'], unique=False)
    op.create_index(op.f('ix_payment_method_name'), 'payment_method', ['name'], unique=False)
    op.create_index(op.f('ix_payment_method_user_id'), 'payment_method', ['user_id'], unique=False)

    # Create category table
    op.create_table(
        'category',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(150), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(255), nullable=True),
        sa.Column('category_type', sqlmodel.sql.sqltypes.AutoString(50), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_category_id'), 'category', ['id'], unique=False)
    op.create_index(op.f('ix_category_name'), 'category', ['name'], unique=False)
    op.create_index(op.f('ix_category_user_id'), 'category', ['user_id'], unique=False)
    op.create_index(op.f('ix_category_category_type'), 'category', ['category_type'], unique=False)

    # Create transaction table
    op.create_table(
        'transaction',
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(255), nullable=True),
        sa.Column('transaction_type', sqlmodel.sql.sqltypes.AutoString(50), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('payment_method_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('currency_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
        sa.ForeignKeyConstraint(['currency_id'], ['currency.id'], ),
        sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.CheckConstraint('amount > 0', name='transaction_amount_positive')
    )
    op.create_index(op.f('ix_transaction_date'), 'transaction', ['date'], unique=False)
    op.create_index(op.f('ix_transaction_id'), 'transaction', ['id'], unique=False)
    op.create_index(op.f('ix_transaction_transaction_type'), 'transaction', ['transaction_type'], unique=False)

    # Create financial_goal table
    op.create_table(
        'financial_goal',
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(150), nullable=False),
        sa.Column('target_amount', sa.Float(), nullable=False),
        sa.Column('current_amount', sa.Float(), nullable=False),
        sa.Column('deadline', sa.Date(), nullable=True),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('currency_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['currency_id'], ['currency.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.CheckConstraint('target_amount > 0', name='financial_goal_target_amount_positive'),
        sa.CheckConstraint('current_amount >= 0', name='financial_goal_current_amount_non_negative')
    )
    op.create_index(op.f('ix_financial_goal_deadline'), 'financial_goal', ['deadline'], unique=False)
    op.create_index(op.f('ix_financial_goal_id'), 'financial_goal', ['id'], unique=False)
    op.create_index(op.f('ix_financial_goal_name'), 'financial_goal', ['name'], unique=False)

    # Create subscription table
    op.create_table(
        'subscription',
        sa.Column('service_name', sqlmodel.sql.sqltypes.AutoString(150), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('frequency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('next_payment_date', sa.Date(), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('currency_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['currency_id'], ['currency.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.CheckConstraint('amount > 0', name='subscription_amount_positive')
    )
    op.create_index(op.f('ix_subscription_active'), 'subscription', ['active'], unique=False)
    op.create_index(op.f('ix_subscription_frequency'), 'subscription', ['frequency'], unique=False)
    op.create_index(op.f('ix_subscription_id'), 'subscription', ['id'], unique=False)
    op.create_index(op.f('ix_subscription_next_payment_date'), 'subscription', ['next_payment_date'], unique=False)
    op.create_index(op.f('ix_subscription_service_name'), 'subscription', ['service_name'], unique=False)

    # Create debt table
    op.create_table(
        'debt',
        sa.Column('creditor_name', sqlmodel.sql.sqltypes.AutoString(150), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('due_date', sa.Date(), nullable=True),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(255), nullable=True),
        sa.Column('is_paid', sa.Boolean(), nullable=False),
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('payment_method_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('currency_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(['currency_id'], ['currency.id'], ),
        sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.CheckConstraint('amount > 0', name='debt_amount_positive')
    )
    op.create_index(op.f('ix_debt_creditor_name'), 'debt', ['creditor_name'], unique=False)
    op.create_index(op.f('ix_debt_due_date'), 'debt', ['due_date'], unique=False)
    op.create_index(op.f('ix_debt_id'), 'debt', ['id'], unique=False)
    op.create_index(op.f('ix_debt_is_paid'), 'debt', ['is_paid'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order (to handle foreign key constraints)
    op.drop_table('debt')
    op.drop_table('subscription')
    op.drop_table('financial_goal')
    op.drop_table('transaction')
    
    # Drop default_currency_id from user table
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_column('user', 'default_currency_id')
    
    # Drop remaining tables
    op.drop_table('category')
    op.drop_table('payment_method')
    op.drop_table('currency')
    # ### end Alembic commands ### 